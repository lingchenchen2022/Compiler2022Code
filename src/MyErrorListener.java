import org.antlr.v4.runtime.BaseErrorListener;
import org.antlr.v4.runtime.RecognitionException;
import org.antlr.v4.runtime.Recognizer;

public class MyErrorListener extends BaseErrorListener{

    private boolean isError;
    public MyErrorListener(){
        isError=false;
    }

    public boolean getIsError(){
        return isError;
    }

    /**
     *
     * @param recognizer  What parser got the error.
     *                    From this object,
     *                    you can access the context as well as the input stream.
     * @param offendingSymbol The offending token in the input token stream, unless recognizer is a lexer (then it's null). If no viable alternative error, has token at which we started production for the decision.e
     * @param line The line number in the input where the error occurred.
     * @param charPositionInLine The character position within that line where the error occurred.
     * @param msg The message to emit.
     * @param e The exception generated by the parser that led to the reporting of an error. It is null in the case where the parser was able to recover in line without exiting the surrounding rule.
     */
    @Override
    public void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol,
                            int line, int charPositionInLine, String msg,
                            RecognitionException e) {
        isError=true;
        System.err.println("Error type A at Line "+line+":"+msg);
    }
}
